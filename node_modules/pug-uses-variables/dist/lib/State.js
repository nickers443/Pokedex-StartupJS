"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pushUniqueVariable = _interopRequireDefault(require("../helpers/pushUniqueVariable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getVariablesInContext(context, column) {
  return Object.keys(context).filter(function (key) {
    return Number(key) <= column;
  }) // $FlowFixMe
  .map(function (key) {
    return context[key];
  }).reduce(function (flattenArray, array) {
    return flattenArray.concat(array);
  }, []);
}

var State =
/*#__PURE__*/
function () {
  function State() {
    _classCallCheck(this, State);

    // Array of variable Nodes
    this.variables = []; // Map of variable names

    this.context = {};
  }

  _createClass(State, [{
    key: "getVariables",
    value: function getVariables() {
      return this.variables;
    }
  }, {
    key: "addVariables",
    value: function addVariables(column, variables) {
      var _this = this;

      var contextVars = getVariablesInContext(this.context, column);
      variables.filter(function (variable) {
        return contextVars.indexOf(variable.value) === -1;
      }).forEach(function (variable) {
        _this.variables = [].concat(_toConsumableArray(_this.variables), [variable]);
      });
    }
  }, {
    key: "addToContext",
    value: function addToContext(column, variables) {
      if (variables.length > 0) {
        if (this.context[column]) {
          this.context[column] = (0, _pushUniqueVariable.default)(this.context[column], variables);
        } else {
          this.context[column] = variables;
        }
      }
    }
  }, {
    key: "clearContext",
    value: function clearContext(column) {
      var _this2 = this;

      Object.keys(this.context).filter(function (key) {
        return Number(key) > column;
      }).forEach(function (key) {
        // $FlowFixMe
        _this2.context[key] = [];
      });
    }
  }]);

  return State;
}();

exports.default = State;